{"version":3,"sources":["redux/actions.js","serverApi.js","redux/store.js","navigation.js","redux/connectors.js","RequestHeader.js","RequestsList.js","requestDetails.js","App.js","index.js"],"names":["loadMoreRequests","dispatch","getState","state","requests","done","start","status","query","uri","encodeURIComponent","fetch","then","response","json","fetchRequests","length","filters","data","Error","type","selectRequest","request","unselectRequest","changeRequestStatus","selected","id","method","body","updateRequestStatus","index","setRequestStatus","catch","setStatusFilter","setQueryFilter","rootReducer","combineReducers","action","slice","component","preloadedState","ROUTES","link","displayName","Nav","withRouter","props","className","map","route","key","location","pathname","NavLink","to","selectedConnector","connect","QueryFilter","placeholder","value","this","onChange","e","setState","target","onClick","onFilter","React","Component","filtersConnector","get","RequestList","hasMore","onEnter","PureComponent","RequestRow","style","textAlign","checked","requested_at","requested_by","recipient","sender","subject","rejected_status","requestsConnector","received_at","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","Requests","Quarantined","App","path","exact","Main","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eeb14854.chunk.js","sourcesContent":["import {fetchRequests, updateRequestStatus} from '../serverApi';\n\nexport const ADD_REQUESTS = 'ADD_REQUESTS';\nexport const REMOVE_REQUEST = 'REMOVE_REQUEST';\nexport const SET_REQUEST_STATUS = 'SET_REQUEST_STATUS';\nexport const NO_MORE_DATA = 'NO_MORE_DATA';\nexport const SELECT_REQUEST = 'SELECT_REQUEST';\nexport const CHANGE_REQUEST_STATUS = 'CHANGE_REQUEST_STATUS';\nexport const SET_STATUS_FILTER = 'STATUS_FILTER';\nexport const SET_QUERY_FILTER = 'QUERY_FILTER';\n\nconst addRequests = (requests) => {\n    return {\n        type: ADD_REQUESTS,\n        requests: requests\n    };\n}\n\nconst removeRequest = (index) => {\n    return {\n        type: REMOVE_REQUEST,\n        index: index\n    };\n}\n\nexport const loadMoreRequests = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        if (state.requests.done)\n            return false;\n        return fetchRequests((state.requests.requests || []).length, state.filters || {})\n            .then(response => {\n                if (!(response.data && typeof response.data === 'object')){\n                    throw new Error('No data');\n                }\n                if (response.data.requests){\n                    dispatch(addRequests(response.data.requests));\n                }\n                if (response.data.done){\n                    dispatch({type: NO_MORE_DATA});\n                }\n            })\n    };\n}\n\nexport const selectRequest = (request) => {\n    return {\n        type: SELECT_REQUEST,\n        request: request\n    }        \n}\n\nexport const unselectRequest = () => {\n    return {\n        type: SELECT_REQUEST,\n        request: null\n    }\n}\n\nconst setRequestStatus = (index, status) => {\n    return {\n        type: SET_REQUEST_STATUS,\n        index, \n        status\n    }\n}\n\nexport const changeRequestStatus = (status) => {\n    return (dispatch, getState) => {\n        const {selected, filters} = getState();\n        if (!selected) return false;\n        updateRequestStatus(selected.id, status).then(() => {\n            dispatch(setRequestStatus(selected.index, status));\n            if (filters.status && filters.status !== 'all' && status !== filters.status){\n                dispatch(unselectRequest());\n                dispatch(removeRequest(selected.index)); \n            }\n            return false;\n        }).catch(() => { /* TODO */});\n    }\n}\n\nexport const setStatusFilter = (status) => {\n    return {\n        type: SET_STATUS_FILTER,\n        status\n    };\n}\n\nexport const setQueryFilter = (query) => {\n    return {\n        type: SET_QUERY_FILTER,\n        query\n    };\n}\n","\nexport const fetchRequests = (start = 0, {status = null, query = null}) => {\n    let uri = `api/requests?offset=${start}${status? '&s=' + status: ''}${query? '&q=' + encodeURIComponent(query) : ''}`;\n    return fetch(uri)\n        .then(response => response.json())\n};\n\nexport const updateRequestStatus = (id, status) => {\n    let uri = `api/requests/${id}`;\n    return fetch(uri, {\n            method: 'PUT',\n            body: status\n        });\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {NO_MORE_DATA, ADD_REQUESTS, SELECT_REQUEST, SET_STATUS_FILTER, SET_QUERY_FILTER, REMOVE_REQUEST, SET_REQUEST_STATUS} from './actions';\n\nconst requests = (state = {}, action) => {\n    if (action.type === ADD_REQUESTS){\n        return {\n            ...state,\n            requests: [...(state.requests || []), ...action.requests]\n        };\n    }\n    else if (action.type === NO_MORE_DATA){\n        return {\n            ...state,\n            done: true\n        }\n    }\n    else if (action.type === SET_STATUS_FILTER || action.type === SET_QUERY_FILTER){\n        return {\n            requests: [],\n            done: false\n        }\n    }\n    else if (action.type === REMOVE_REQUEST){\n        return {\n            ...state,\n            requests: [...state.requests.slice(0, action.index), ...state.requests.slice(action.index+1)] \n        }\n    }\n    else if (action.type === SET_REQUEST_STATUS){\n        return {\n            ...state,\n            requests: [\n                ...state.requests.slice(0, action.index), \n                {...state.requests[action.index], status: action.status}, \n                ...state.requests.slice(action.index+1)\n            ] \n        }\n    }\n    return state;\n}\n\nconst selected = (state = null, action) => {\n    if (action.type === SELECT_REQUEST){\n        return action.request;\n    }\n    return state;\n}\n\nconst filters = (state = {}, action) => {\n    if (action.type === SET_STATUS_FILTER){\n        return {\n            ...state,\n            status: action.status\n        };\n    }\n    if (action.type === SET_QUERY_FILTER){\n        return {\n            ...state,\n            query: action.query\n        };\n    }\n    return state;\n}\n\n\nconst rootReducer = combineReducers({\n    filters,\n    requests,\n    selected\n});\n\nexport default function getStore(preloadedState) {\n    return createStore(\n        rootReducer,\n        preloadedState,\n        composeWithDevTools(applyMiddleware(thunkMiddleware))\n    )\n};\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withRouter } from \"react-router\";\n\nconst ROUTES = [\n    {link: '/', displayName: 'Release Requests'},\n    {link: '/quarantined', displayName: 'Quarantined'}\n];\n\nconst Nav = withRouter((props) => {\n    return (\n        <nav id=\"nav\">\n            <div className=\"innertube\">\n                <ul>\n                    {ROUTES.map((route, index) => <NavLink key={index} {...route} selected={route.link === props.location.pathname}/>)}\n                </ul>\t\t\n            </div>\n        </nav>\t\n    ); \n});\n\nconst NavLink = (props) => <li className={`${props.selected? 'selected': ''}`}><Link to={props.link} >{props.displayName}</Link></li>\n\nexport default Nav;\n","import {connect} from 'react-redux';\nimport {loadMoreRequests, selectRequest, unselectRequest, setStatusFilter, setQueryFilter, changeRequestStatus} from './actions'\n\nconst requestsConnector = (component) => connect(\n    state => ({requests: state.requests}), \n    {loadMoreRequests}\n)(component);\n\nconst selectedConnector = (component) => connect(\n    state => ({selected: state.selected}),\n    {selectRequest, unselectRequest}\n)(component);\n\nconst filtersConnector  = (component) => connect(\n    state => ({filters: state.filters}),\n    {setStatusFilter, setQueryFilter, changeRequestStatus}\n)(component);\n\nexport {requestsConnector, selectedConnector, filtersConnector};\n\n","import React from 'react';\nimport get from 'lodash.get';\nimport {filtersConnector} from './redux/connectors';\n\nconst RequestHeader = (props) => {\n    return (\n        <table>\n            <tbody>\n                <tr>\n                    <td>\n                        <span>Status</span>\n                        <select value={(props.filters || {}).status} onChange={(e) => props.setStatusFilter(e.target.value)}>\n                            <option value=\"all\">All Requests</option>\n                            <option value=\"open\">Open</option>\n                            <option value=\"released\">Approved</option>\n                            <option value=\"rejected\">Rejected </option>\n                        </select>\n                    </td>\n                    <td>\n                        <button onClick={() => props.changeRequestStatus('released')}>\n                            <i className=\"material-icons md-14\">playlist_add_check</i>\n                            Release\n                        </button>\n                    </td>\n                    <td>\n                        <button onClick={() => props.changeRequestStatus('rejected')}>\n                            <i className=\"material-icons md-14\">clear</i>\n                            Reject\n                        </button>\n                    </td>\n                    <td>\n                        <button>\n                            <i className=\"material-icons md-14\">refresh</i>\n                            Refresh\n                        </button>\n                    </td>\n                    <td>\n                        <QueryFilter query={get(props, 'filters.query')} onFilter={(query) => props.setQueryFilter(query)} />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nclass QueryFilter extends React.Component {\n\n    state = { \n        query: this.props.query || ''\n    };\n\n    render(){\n        return (\n            <div className=\"search\">\n                <span className=\"material-icons md-14 input-icon\">search</span>\n                <input  placeholder=\"Search\" \n                    type=\"text\"\n                    value={(this.props.filters || {}).query}\n                    onChange={(e) => this.setState({query: e.target.value})}\n                />\n                <button onClick={() => this.props.onFilter(this.state.query)}>\n                    <i className=\"material-icons md-14\">filter_list</i>\n                </button>\n            </div>\n        );\n    }\n}\nexport default filtersConnector(RequestHeader);\n","import React from 'react';\nimport { Waypoint } from 'react-waypoint';\nimport get from 'lodash.get';\nimport {requestsConnector, selectedConnector} from './redux/connectors';\n\nclass RequestList extends React.PureComponent {\n\n    componentDidMount(){\n        this.props.loadMoreRequests();\n    }\n\n    componentDidUpdate(){\n        if (!get(this.props, 'requests.requests', []).length){\n            this.props.loadMoreRequests();\n        }\n    }\n\n    render(){\n        const requests = (this.props.requests || {}).requests || [];\n        const hasMore = !(this.props.requests || {}).done;\n        return (\n            <div id=\"mail-requests\">\n                <table className=\"requests\">\n                    <thead className=\"head\">\n                        <tr>\n                            <th className='five column'><input type=\"checkbox\"/></th>\n                            <th className='ten column'>ID</th>\n                            <th className='fifteen column'>Request time</th>\n                            <th className='fifteen column'>Requested By</th>\n                            <th className='fifteen column'>Recipient</th>\n                            <th className='fifteen column'>Sender</th>\n                            <th className='fifteen column'>Subject</th>\n                            <th className='ten column'>Categorized at</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {requests.map((request, index) => \n                        <RequestRow key={request.id} \n                            index={index} \n                            {...request}\n                            selected={this.props.selected && request.id === this.props.selected.id}\n                            onChange={() => this.props.selected && request.id === this.props.selected.id? this.props.unselectRequest() : this.props.selectRequest({...request, index})}/>\n                        )}\n                        {hasMore && requests.length && <Waypoint onEnter={() => this.props.loadMoreRequests()} />}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst RequestRow = (props) => {\n    return (\n        <tr className={props.status === 'rejected' ? 'red' : (props.status === 'released' ? 'green' : '')}>\n            <td className=\"five column\" style={{ textAlign: 'center' }}>\n                <input type=\"checkbox\" checked={props.selected} onChange={props.onChange}/>\n            </td>\n            <td className=\"ten column\"><span>{props.id}</span></td>\n            <td className=\"fifteen column\"><span>{props.requested_at}</span></td>\n            <td className=\"fifteen column\"><span>{props.requested_by}</span></td>\n            <td className=\"fifteen column\"><span>{props.recipient}</span></td>\n            <td className=\"fifteen column\"><span>{props.sender}</span></td>\n            <td className=\"fifteen column\"><span>{props.subject}</span></td>\n            <td className=\"ten column\"><span>{props.rejected_status}</span></td>\n        </tr>\n    );\n}\n\nexport default selectedConnector(requestsConnector(RequestList));\n\n","import React from 'react';\nimport {selectedConnector} from './redux/connectors';\n\nconst RequestDetails = (props) => {\n    const request = props.selected || {};\n    return (\n        <div id=\"mail-details\">\n            <div className=\"head\">\n                <span className=\"title\"><b>DETAILS</b></span>\n                <div className=\"rest\"></div>\n            </div>\n            <div className=\"body\">\n                <div className=\"column\">\n                    <div className=\"title\">E-Mail Information</div>\n                    <div className=\"data\">\n                        <div className=\"row\">\n                            <div className=\"label\">ID</div>\n                            <div className=\"value\">{request.id}</div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"label\">Received time</div>\n                            <div className=\"value\">{request.received_at}</div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"label\">Recipient</div>\n                            <div className=\"value\">{request.recipient}</div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"label\">Subject</div>\n                            <div className=\"value\">{request.subject}</div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"label\">Sender</div>\n                            <div className=\"value\">{request.sender}</div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"label\">Categorized at</div>\n                            <div className=\"value\">{request.rejected_status}</div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"column\">\n                    <div className=\"title\">Request information</div>\n                    <div className=\"data\">\n                        <div className=\"row\">\n                            <div className=\"label\">Request Time</div>\n                            <div className=\"value\">{request.requested_by}</div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"label\">Requested at</div>\n                            <div className=\"value\">{request.requested_at}</div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"label\">Status</div>\n                            <div className=\"value\">{request.status}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default selectedConnector(RequestDetails);\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport getStore from './redux/store';\nimport Nav from './navigation';\nimport RequestHeader from './RequestHeader';\nimport RequestList from './RequestsList';\nimport RequestDetails from './requestDetails';\nimport './App.css';\n\nconst exampleRequest = {\"id\":\"b74e65a3-9144-3b32-87b1-c2573a7f325a\",\"requested_at\":\"2016-12-23 21:33\",\"requested_by\":\"heaney.ida@hotmail.com\",\"recipient\":\"Requester\",\"sender\":\"whitney89@gmail.com\",\"subject\":\"Qui est cumque aut eius nam.\",\"rejected_status\":\"\"};\n\nconst store = getStore({});\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router>\n                <Nav />\n                <Switch >\n                    <Route path='/quarantined' component={Quarantined} />\n                    <Route exact path='/' component={Requests}/>\n                </Switch>\n            </Router>\n        </Provider>\n    );\n}\n\nconst Requests = (props) => {\n    return (\n        <Main>\n            <RequestHeader />\n            <RequestList />\n            <RequestDetails />\n        </Main>\n    );\n};\n\nconst Quarantined = () => <Main>Quarantined</Main>;\n\nexport default App;\n\n\nconst Main = (props) => {\n    return (\n\t\t<main id=\"main\">\n            {props.children}\n        </main>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}